<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.bricks.framework.common.dao.ScheduleTaskMapper">
	<resultMap id="BaseResultMap"
		type="org.bricks.framework.common.entity.ScheduleTask">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="job_name" jdbcType="VARCHAR" property="jobName" />
		<result column="job_group" jdbcType="VARCHAR" property="jobGroup" />
		<result column="job_status" jdbcType="VARCHAR" property="jobStatus" />
		<result column="cron_expression" jdbcType="VARCHAR" property="cronExpression" />
		<result column="description" jdbcType="VARCHAR" property="description" />
		<result column="bean_class" jdbcType="VARCHAR" property="beanClass" />
		<result column="is_concurrent" jdbcType="VARCHAR" property="isConcurrent" />
		<result column="spring_id" jdbcType="VARCHAR" property="springId" />
		<result column="method_name" jdbcType="VARCHAR" property="methodName" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, job_name, job_group, job_status, cron_expression,
		description,
		bean_class, is_concurrent,
		spring_id, method_name,
		create_time, update_time
	</sql>
	<select id="selectByExample"
		parameterType="org.bricks.framework.common.entity.ScheduleTaskExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from schedule_task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
		<if test="limit != null">
			<if test="offset != null">
				limit ${offset}, ${limit}
			</if>
			<if test="offset == null">
				limit ${limit}
			</if>
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from schedule_task
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		schedule_task
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="org.bricks.framework.common.entity.ScheduleTaskExample">
		delete from schedule_task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="org.bricks.framework.common.entity.ScheduleTask">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into schedule_task (job_name, job_group, job_status,
		cron_expression, description, bean_class,
		is_concurrent, spring_id,
		method_name,
		create_time, update_time)
		values
		(#{jobName,jdbcType=VARCHAR}, #{jobGroup,jdbcType=VARCHAR},
		#{jobStatus,jdbcType=VARCHAR},
		#{cronExpression,jdbcType=VARCHAR},
		#{description,jdbcType=VARCHAR}, #{beanClass,jdbcType=VARCHAR},
		#{isConcurrent,jdbcType=VARCHAR}, #{springId,jdbcType=VARCHAR},
		#{methodName,jdbcType=VARCHAR},
		#{createTime,jdbcType=TIMESTAMP},
		#{updateTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="org.bricks.framework.common.entity.ScheduleTask">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into schedule_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="jobName != null">
				job_name,
			</if>
			<if test="jobGroup != null">
				job_group,
			</if>
			<if test="jobStatus != null">
				job_status,
			</if>
			<if test="cronExpression != null">
				cron_expression,
			</if>
			<if test="description != null">
				description,
			</if>
			<if test="beanClass != null">
				bean_class,
			</if>
			<if test="isConcurrent != null">
				is_concurrent,
			</if>
			<if test="springId != null">
				spring_id,
			</if>
			<if test="methodName != null">
				method_name,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="jobName != null">
				#{jobName,jdbcType=VARCHAR},
			</if>
			<if test="jobGroup != null">
				#{jobGroup,jdbcType=VARCHAR},
			</if>
			<if test="jobStatus != null">
				#{jobStatus,jdbcType=VARCHAR},
			</if>
			<if test="cronExpression != null">
				#{cronExpression,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				#{description,jdbcType=VARCHAR},
			</if>
			<if test="beanClass != null">
				#{beanClass,jdbcType=VARCHAR},
			</if>
			<if test="isConcurrent != null">
				#{isConcurrent,jdbcType=VARCHAR},
			</if>
			<if test="springId != null">
				#{springId,jdbcType=VARCHAR},
			</if>
			<if test="methodName != null">
				#{methodName,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="org.bricks.framework.common.entity.ScheduleTaskExample"
		resultType="java.lang.Long">
		select count(*) from schedule_task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update schedule_task
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.jobName != null">
				job_name = #{record.jobName,jdbcType=VARCHAR},
			</if>
			<if test="record.jobGroup != null">
				job_group = #{record.jobGroup,jdbcType=VARCHAR},
			</if>
			<if test="record.jobStatus != null">
				job_status = #{record.jobStatus,jdbcType=VARCHAR},
			</if>
			<if test="record.cronExpression != null">
				cron_expression =
				#{record.cronExpression,jdbcType=VARCHAR},
			</if>
			<if test="record.description != null">
				description = #{record.description,jdbcType=VARCHAR},
			</if>
			<if test="record.beanClass != null">
				bean_class = #{record.beanClass,jdbcType=VARCHAR},
			</if>
			<if test="record.isConcurrent != null">
				is_concurrent = #{record.isConcurrent,jdbcType=VARCHAR},
			</if>
			<if test="record.springId != null">
				spring_id = #{record.springId,jdbcType=VARCHAR},
			</if>
			<if test="record.methodName != null">
				method_name = #{record.methodName,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.updateTime != null">
				update_time = #{record.updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update schedule_task
		set id = #{record.id,jdbcType=INTEGER},
		job_name =
		#{record.jobName,jdbcType=VARCHAR},
		job_group =
		#{record.jobGroup,jdbcType=VARCHAR},
		job_status =
		#{record.jobStatus,jdbcType=VARCHAR},
		cron_expression =
		#{record.cronExpression,jdbcType=VARCHAR},
		description =
		#{record.description,jdbcType=VARCHAR},
		bean_class =
		#{record.beanClass,jdbcType=VARCHAR},
		is_concurrent =
		#{record.isConcurrent,jdbcType=VARCHAR},
		spring_id =
		#{record.springId,jdbcType=VARCHAR},
		method_name =
		#{record.methodName,jdbcType=VARCHAR},
		create_time =
		#{record.createTime,jdbcType=TIMESTAMP},
		update_time =
		#{record.updateTime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="org.bricks.framework.common.entity.ScheduleTask">
		update schedule_task
		<set>
			<if test="jobName != null">
				job_name = #{jobName,jdbcType=VARCHAR},
			</if>
			<if test="jobGroup != null">
				job_group = #{jobGroup,jdbcType=VARCHAR},
			</if>
			<if test="jobStatus != null">
				job_status = #{jobStatus,jdbcType=VARCHAR},
			</if>
			<if test="cronExpression != null">
				cron_expression = #{cronExpression,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=VARCHAR},
			</if>
			<if test="beanClass != null">
				bean_class = #{beanClass,jdbcType=VARCHAR},
			</if>
			<if test="isConcurrent != null">
				is_concurrent = #{isConcurrent,jdbcType=VARCHAR},
			</if>
			<if test="springId != null">
				spring_id = #{springId,jdbcType=VARCHAR},
			</if>
			<if test="methodName != null">
				method_name = #{methodName,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.bricks.framework.common.entity.ScheduleTask">
		update
		schedule_task
		set job_name = #{jobName,jdbcType=VARCHAR},
		job_group =
		#{jobGroup,jdbcType=VARCHAR},
		job_status =
		#{jobStatus,jdbcType=VARCHAR},
		cron_expression =
		#{cronExpression,jdbcType=VARCHAR},
		description =
		#{description,jdbcType=VARCHAR},
		bean_class =
		#{beanClass,jdbcType=VARCHAR},
		is_concurrent =
		#{isConcurrent,jdbcType=VARCHAR},
		spring_id =
		#{springId,jdbcType=VARCHAR},
		method_name =
		#{methodName,jdbcType=VARCHAR},
		create_time =
		#{createTime,jdbcType=TIMESTAMP},
		update_time =
		#{updateTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>